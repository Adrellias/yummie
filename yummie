#!/usr/bin/env python

import ConfigParser
import os
import re
import subprocess
import sys


class Config(ConfigParser.ConfigParser):
    def __init__(self, filename):
        ConfigParser.ConfigParser.__init__(self)
        self.read([filename])

    def getdefault(self, section, option, default=None):
        try:
            ConfigParser.get(self, section, option)
        except ConfigParser.NoOptionError:
            return default


class Yummie(object):

    _re_package = re.compile(r'(?P<package>\S+)\.' +
                             r'(?P<arch>:i[3-6]86|x86_64|noarch)')

    def __init__(self, option, config):
        self.option = option
        self.config = config

        # stderr of the last command
        self.errors = ''
        # List of pending package
        self.updates = []

    def _package_args(self):
        args = []
        for option in self.config.options('package'):
            if option.startswith('exclude'):
                args.append('--exclude="%s"' %
                            self.config.get('package', option))
            else:
                raise ValueError('Unsupported flag in section package: %s' %
                                 option)

        return args

    def _repository_args(self):
        args = []
        for option in self.config.options('repository'):
            if option.startswith('exclude'):
                args.append('--disablerepo="%s"' %
                            self.config.get('repository', option))
            else:
                raise ValueError('Unsupported flag in section repository: %s' %
                                 option)

        return args

    def _yum(self, args=[]):
        command = [
            self.config.getdefault('bin', 'yum', '/usr/bin/yum'),
            '--color=never',
        ]
        if self.option.sudo and os.geteuid() != 0:
            sudo = self.config.getdefault('bin', 'sudo', '/usr/bin/sudo')
            command.insert(0, sudo)

        command.extend(args)
        pipe = subprocess.Popen(command,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)

        output, self.errors = pipe.communicate()
        return pipe.returncode, output

    def check_updates(self):
        args = ['--cacheonly', '--debuglevel=%d' % (self.option.debuglevel,)]
        args.extend(self._package_args())
        args.extend(self._repository_args())
        args.append('check-update')

        returncode, output = self._yum(args)
        self.updates = []
        for line in output.splitlines():
            test = self._re_package.match(line)
            if test:
                self.updates.append((
                    test.groupdict()['package'],    # package name
                    line.split()[1],                # package version
                ))

        return returncode

    def upgrade(self, packages):
        args = ['--debuglevel=%d' % (self.option.debuglevel,)]
        args.extend(self._package_args())
        args.extend(self._repository_args())
        args.append('--obsoletes')
        args.append('-y')
        args.append('update')
        args.extend(packages)

        returncode, output = self._yum(args)
        self.updates = []
        return returncode


def run():
    import optparse

    parser = optparse.OptionParser()
    parser.add_option('-c', '--config', default='/etc/yum/yummie.conf',
        metavar='FILENAME',
        help='Configuration file (default: /etc/yum/yummie.conf)')
    parser.add_option('-d', '--debuglevel', default=-1, type='int',
        metavar='LEVEL',
        help='Debug level (default: 0)')
    parser.add_option('--sudo', default=False, action='store_true',
        help='Use sudo (default: no)')
    parser.add_option('-u', '--upgrade', default=False, action='store_true',
        help='Do upgrade (default: no)')
    parser.add_option('-v', '--verbose', default=False, action='store_true',
        help='Be verbose (default: no)')

    option, args = parser.parse_args()
    config = Config(option.config)

    # Parse default options from configuration file
    if not option.debuglevel and config.has_option('yummie', 'debuglevel'):
        option.debuglevel = config.getint('yummie', 'debuglevel')
    for flag in ('sudo', 'upgrade', 'verbose'):
        if not getattr(option, flag) and config.has_option('yummie', flag):
            setattr(option, flag, config.getboolean('yummie', flag))

    yummie = Yummie(option, config)
    updates = yummie.check_updates()
    if updates == 0:
        if option.verbose:
            print >>sys.stderr, 'No updates'
        return 0

    elif updates == 1:
        print >>sys.stderr, 'Checking for updates failed:'
        print >>sys.stderr, yummie.errors.rstrip()
        return 1

    if yummie.updates:
        if option.verbose:
            print >>sys.stderr, '%s packages need updating' % \
                                len(yummie.updates)
            for update, version in sorted(yummie.updates):
                print >>sys.stderr, '\t%s %s' % (update, version)

    else:
        if option.verbose:
            print >>sys.stderr, 'System up to date'
        return 0

    if not option.upgrade:
        return 0

    upgrade = yummie.upgrade([update for update, version in yummie.updates])
    if upgrade == 1:
        print >>sys.stderr, 'There was an error doing the upgrades:'
        print >>sys.stderr, yummie.errors.rstrip()
        return 1

    else:
        if option.verbose:
            print >>sys.stderr, 'Upgrades done'
        return 0


if __name__ == '__main__':
    sys.exit(run())
